diff --git a/src/filemenu.py b/src/filemenu.py
index fb76f48..4d65e33 100644
--- a/src/filemenu.py
+++ b/src/filemenu.py
@@ -111,18 +111,9 @@ class CorrelationsCommand:
 	def execute(self, common: Spaces) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._correlations_caption, self._correlations_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._correlations_caption, self._correlations_filter
+		)
 		# Error handling
 		# If not a correlations file, then return an error message
 		try:
@@ -503,18 +494,9 @@ class EvaluationsCommand:
 	def execute(self, common: Spaces) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._evaluations_caption, self._evaluations_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._evaluations_caption, self._evaluations_filter
+		)
 		# Error handling
 		# If not an evaluations file, then return an error message
 		try:
@@ -609,18 +591,9 @@ class GroupedDataCommand:
 	def execute(self, common: Spaces) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._grouped_data_caption, self._grouped_data_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._grouped_data_caption, self._grouped_data_filter
+		)
 		# Error handling
 		# If not a grouped data file, then return an error message
 		try:
@@ -681,18 +654,9 @@ class IndividualsCommand:
 	def execute(self, common: Spaces) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._individuals_caption, self._individuals_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._individuals_caption, self._individuals_filter
+		)
 		# Error handling
 		# If not an individuals file, then return an error message
 		try:
@@ -912,18 +876,9 @@ class OpenSampleDesignCommand:
 	def execute(self, common: Spaces) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._sample_design_caption, self._sample_design_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._sample_design_caption, self._sample_design_filter
+		)
 		# Error handling
 		# If not a sample design file, then return an error message
 		try:
@@ -976,18 +931,9 @@ class OpenSampleRepetitionsCommand:
 	def execute(self, common: Spaces) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._sample_repetitions_caption, self._sample_repetitions_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._sample_repetitions_caption, self._sample_repetitions_filter
+		)
 		# Error handling
 		# If not a sample repetitions file, then return an error message
 		try:
@@ -1040,18 +986,9 @@ class OpenSampleSolutionsCommand:
 	def execute(self, common: Spaces) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._sample_solutions_caption, self._sample_solutions_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._sample_solutions_caption, self._sample_solutions_filter
+		)
 		# Error handling
 		# If not a sample solutions file, then return an error message
 		try:
@@ -1102,18 +1039,9 @@ class OpenScoresCommand:
 	def execute(self, common: Spaces) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._scores_caption, self._scores_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._scores_caption, self._scores_filter
+		)
 		# Error handling
 		# If not a scores file, then return an error message
 		try:
@@ -1247,10 +1175,6 @@ class OpenScriptCommand:
 			# Always clear script execution flag
 			self._director.executing_script = False
 
-		# Reset command name to "Open script" before recording completion
-		# (otherwise it will print success message for the last script command)
-		self._director.command = "Open script"
-
 		self._director.title_for_table_widget = (
 			f"Script executed: {commands_executed} commands from "
 			f"{Path(file_name).name}"
@@ -1262,16 +1186,6 @@ class OpenScriptCommand:
 
 	# ------------------------------------------------------------------------
 
-	def _display(self) -> object:
-		"""Display widget for script execution completion.
-
-		Returns:
-			QTextEdit widget showing script execution summary
-		"""
-		return self._director.display_a_line()
-
-	# ------------------------------------------------------------------------
-
 	def _parse_script_line(self, line: str) -> tuple[str, dict]:
 		"""Parse a script line into command name and parameters.
 
@@ -1400,58 +1314,29 @@ class OpenScriptCommand:
 			line_num: Line number in script (for error messages)
 			line: Original line text (for error messages)
 		"""
-		import inspect  # noqa: PLC0415
+		from dictionaries import request_dict  # noqa: PLC0415
 
-		# Get command class from widget_dict (which maps command names to classes)
-		widget_dict = self._director.widget_dict
+		# Map command name to request_dict key
+		request_key = command_name.lower().replace(" ", "_")
 
-		if command_name not in widget_dict:
+		# Verify command exists
+		if request_key not in request_dict:
 			raise SpacesError(
 				"Unknown command",
 				f"Command '{command_name}' not found in line {line_num}",
 			)
 
-		# widget_dict format: [CommandClass, sharing_type, display_lambda]
-		command_class = widget_dict[command_name][0]
+		# Get command class
+		command_class = request_dict[request_key][0]
 
 		# Store script parameters in director for command to access
 		self._director.script_parameters = params_dict
 
 		try:
-			# Instantiate command
+			# Instantiate and execute command directly
+			# This bypasses request_control to allow dynamic parameters
 			command_instance = command_class(self._director, self.common)
-
-			# Check execute method signature to determine if extra param needed
-			execute_sig = inspect.signature(command_instance.execute)
-			params = list(execute_sig.parameters.keys())
-
-			# Most commands have: execute(self, common)
-			# Some have: execute(self, common, extra_param)
-			# Note: inspect.signature on bound method excludes 'self'
-			# so params only contains 'common' and any extra parameters
-			# Call appropriately based on signature
-			if len(params) > 1:
-				# Has extra parameter - try to provide it from script params
-				param_name = params[1]
-				if param_name in params_dict:
-					extra_value = params_dict[param_name]
-					command_instance.execute(self.common, extra_value)
-				else:
-					# No value in script - check if parameter has default
-					param_obj = execute_sig.parameters[param_name]
-					if param_obj.default != inspect.Parameter.empty:
-						# Has default, call without extra param
-						command_instance.execute(self.common)
-					else:
-						# Required but not provided
-						raise SpacesError(
-							"Missing parameter",
-							f"Command '{command_name}' requires parameter '{param_name}' "
-							f"but it was not provided in line {line_num}"
-						)
-			else:
-				# Standard execute(self, common) signature
-				command_instance.execute(self.common)
+			command_instance.execute(self.common)
 
 		finally:
 			# Clear script parameters
@@ -2287,23 +2172,11 @@ class SaveScriptCommand:
 			# Build command line with parameters
 			cmd_line = cmd_state.command_name
 			if cmd_state.command_params:
-				# Add parameters as key=value pairs
-				# Format values appropriately: lists/dicts as-is, strings with quotes if needed
-				param_parts = []
-				for key, value in cmd_state.command_params.items():
-					if isinstance(value, str):
-						# String values - add quotes if they contain spaces or special chars
-						if ' ' in value or '/' in value or '\\' in value:
-							param_parts.append(f'{key}="{value}"')
-						else:
-							param_parts.append(f'{key}={value}')
-					elif isinstance(value, (list, dict)):
-						# Lists and dicts - write as Python literals
-						param_parts.append(f'{key}={value}')
-					else:
-						# Numbers, booleans, etc.
-						param_parts.append(f'{key}={value}')
-				params_str = " ".join(param_parts)
+				# Add parameters as key=value pairs (without quotes around value)
+				params_str = " ".join(
+					f'{key}={value}'
+					for key, value in cmd_state.command_params.items()
+				)
 				cmd_line = f"{cmd_line} {params_str}"
 			script_lines.append(cmd_line)
 
@@ -2781,21 +2654,9 @@ class SimilaritiesCommand:
 	def execute(self, common: Spaces, value_type: str) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-			# Also check for value_type override in script
-			if "value_type" in self._director.script_parameters:
-				value_type = self._director.script_parameters["value_type"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._similarities_caption, self._similarities_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._similarities_caption, self._similarities_filter
+		)
 		# Read and validate similarities file
 		self._director.similarities_candidate = common.read_lower_triangular_matrix(
 			file_name,
@@ -2866,18 +2727,9 @@ class TargetCommand:
 	def execute(self, common: Spaces) -> None:
 		self._director.record_command_as_selected_and_in_process()
 		self._director.optionally_explain_what_command_does()
-
-		# Check if executing from script with parameters
-		if (
-			self._director.executing_script
-			and self._director.script_parameters
-			and "file_name" in self._director.script_parameters
-		):
-			file_name = self._director.script_parameters["file_name"]
-		else:
-			file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
-				self._target_caption, self._target_filter
-			)
+		file_name = self._director.get_file_name_and_handle_nonexistent_file_names(
+			self._target_caption, self._target_filter
+		)
 
 		# Capture state for undo BEFORE modifications
 		params = {"file_name": file_name}
